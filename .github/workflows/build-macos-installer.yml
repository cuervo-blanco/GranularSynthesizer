name: Build macOS Installer for x86_64

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build-intel:
    runs-on: macos-latest
    permissions:
      contents: write

    env:
      BACKEND_DIR: backend
      FRONTEND_DIR: frontend/build
      QT_EMAIL: ${{ secrets.QT_EMAIL }}
      QT_PASSWORD: ${{ secrets.QT_PASSWORD }}
      QT_INSTALL_PATH: "https://d13lb3tujbc8s0.cloudfront.net/onlineinstallers/qt-online-installer-macOS-x64-4.8.1.dmg"
      QT_PATH: ~/Qt/6.8.1/macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          eval "$(/usr/local/bin/brew shellenv)"

          brew install --formula cmake rust
          brew install python@3.13
          brew link --overwrite python@3.13

          python3 --version
          rustc --version
          cargo --version

          echo 'export PATH="/usr/local/bin:$PATH"' >> ~/.bash_profile
          source ~/.bash_profile

          echo "QT_INSTALL_PATH: $QT_INSTALL_PATH"
          if [ -z "$QT_INSTALL_PATH" ]; then
            echo "Error: QT_INSTALL_PATH is not set or invalid."
            exit 1
          fi

          mkdir ~/Qt
          curl -L -O $QT_INSTALL_PATH
          hdiutil attach qt-online-installer-macOS-x64-4.8.1.dmg 
          /Volumes/qt-online-installer-macOS-x64-4.8.1/qt-online-installer-macOS-x64-4.8.1.app/Contents/MacOS/qt-online-installer-macOS-x64-4.8.1 install -t ~/Qt -m "$QT_EMAIL" --pw "$QT_PASSWORD" --accept-licenses â€”accept-obligations --default-answer --auto-answer telemetry-question=No,AssociateCommonFiletypes=No --confirm-command --verbose

      - name: Build Rust Backend (Intel)
        run: |
          cd $BACKEND_DIR
          cargo build --release --target=x86_64-apple-darwin

      - name: Build C++ Frontend (Intel)
        run: |
          eval "$(/usr/local/bin/brew shellenv)"
          mkdir -p $FRONTEND_DIR
          cmake -B $FRONTEND_DIR -S . -DQT_PATH=$QT_PATH
          cmake --build $FRONTEND_DIR/build

      - name: Bundle .app with macdeployqt (Intel)
        run: |
          eval "$(/usr/local/bin/brew shellenv)"
          macdeployqt $FRONTEND_DIR/Bundles/GranularSynth.app -dmg

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: "Release for GranularSynth ${{ github.ref_name }}."
          draft: false
          prerelease: false

      - name: Upload Intel .dmg to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: $FRONTEND_DIR/GranularSynth-Intel.dmg
          asset_name: GranularSynth-Intel.dmg
          asset_content_type: application/octet-stream

