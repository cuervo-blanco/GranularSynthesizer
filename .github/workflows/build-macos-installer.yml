name: Build macOS Installer

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build-intel:
    runs-on: macos-latest
    permissions:
      contents: write

    env:
      BACKEND_DIR: backend
      FRONTEND_DIR: frontend/build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Intel Dependencies
        run: |
          arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          eval "$(/usr/local/bin/brew shellenv)"
          brew install qt cmake rustup-init
          rustup-init -y
          rustup install stable
          rustup default stable
          QT_PATH=$(find ~/Qt -type d -name "macos" | sort | tail -n 1)
          QT_PATH=$(qtpaths --qt-install-path)
          echo "CMAKE_PREFIX_PATH=$QT_PATH" >> $GITHUB_ENV

      - name: Build Rust Backend (Intel)
        run: |
          cd $BACKEND_DIR
          cargo build --release --target=x86_64-apple-darwin

      - name: Build C++ Frontend (Intel)
        run: |
          eval "$(/usr/local/bin/brew shellenv)"
          mkdir -p $FRONTEND_DIR
          cd $FRONTEND_DIR
          cmake ..
          cmake -DCMAKE_PREFIX_PATH="$QT_PATH" -S . -B build

      - name: Bundle .app with macdeployqt (Intel)
        run: |
          eval "$(/usr/local/bin/brew shellenv)"
          macdeployqt $FRONTEND_DIR/Bundles/GranularSynth.app

      - name: Upload Intel .dmg to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: $FRONTEND_DIR/GranularSynth-Intel.dmg
          asset_name: GranularSynth-Intel.dmg
          asset_content_type: application/octet-stream

  build-arm:
    runs-on: macos-latest
    permissions:
      contents: write

    env:
      BACKEND_DIR: backend
      FRONTEND_DIR: frontend/build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install ARM Dependencies
        run: |
          eval "$(/opt/homebrew/bin/brew shellenv)"
          brew install qt cmake rustup-init
          rustup-init -y
          rustup install stable
          rustup default stable
          QT_PATH=$(find ~/Qt -type d -name "macos" | sort | tail -n 1)
          QT_PATH=$(qtpaths --qt-install-path)
          echo "CMAKE_PREFIX_PATH=$QT_PATH" >> $GITHUB_ENV

      - name: Build Rust Backend (ARM)
        run: |
          cd $BACKEND_DIR
          cargo build --release --target=aarch64-apple-darwin

      - name: Build C++ Frontend (ARM)
        run: |
          eval "$(/opt/homebrew/bin/brew shellenv)"
          mkdir -p $FRONTEND_DIR
          cd $FRONTEND_DIR
          cmake ..
          cmake -DCMAKE_PREFIX_PATH="$QT_PATH" -S . -B build

      - name: Bundle .app with macdeployqt (ARM)
        run: |
          eval "$(/opt/homebrew/bin/brew shellenv)"
          macdeployqt $FRONTEND_DIR/Bundles/GranularSynth.app

      - name: Create ARM .dmg
        run: |
          hdiutil create -volname GranularSynth \
                         -srcfolder $FRONTEND_DIR/Bundles/GranularSynth.app \
                         -ov -format UDZO \
                         $FRONTEND_DIR/GranularSynth-ARM.dmg

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: "Release for GranularSynth ${{ github.ref_name }}."
          draft: false
          prerelease: false

      - name: Upload ARM .dmg to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: $FRONTEND_DIR/GranularSynth-ARM.dmg
          asset_name: GranularSynth-ARM.dmg
          asset_content_type: application/octet-stream
