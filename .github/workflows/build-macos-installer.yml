name: Build macOS Installer

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build-macos:
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          # Install Homebrew if not available
          if ! command -v brew &> /dev/null; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi
          brew install qt cmake
          rustup install stable
          rustup default stable
          rustup target add x86_64-apple-darwin aarch64-apple-darwin

      - name: Run installation script
        run: |
          cargo build --release --target=x86_64-apple-darwin
          cargo build --release --target=aarch64-apple-darwin
          mkdir -p backend/target/universal/release
          lipo -create \
              backend/target/x86_64-apple-darwin/release/libbackend.a \
              backend/target/aarch64-apple-darwin/release/libbackend.a \
              -output backend/target/universal/release/libbackend.a

      - name: Build C++ frontend
        run: |
          mkdir -p frontend/build
          cd frontend/build
          cmake -DCMAKE_PREFIX_PATH=$(brew --prefix qt) ..
          cmake --build . --config Release

      - name: Bundle .app with macdeployqt
        run: |
          macdeployqt frontend/build/Bundles/GranularSynth.app

      - name: Create .dmg file
        run: |
          hdiutil create -volname GranularSynth \
                         -srcfolder frontend/build/Bundles/GranularSynth.app \
                         -ov -format UDZO \
                         frontend/build/GranularSynth.dmg

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: "Release for GranularSynth ${{ github.ref_name }}."
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: frontend/build/GranularSynth.dmg
          asset_name: GranularSynth.dmg
          asset_content_type: application/octet-stream
